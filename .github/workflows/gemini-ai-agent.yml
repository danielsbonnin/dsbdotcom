name: Gemini AI Agent
on:
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created]

env:
  NODE_ENV: production

jobs:
  gemini-ai-agent:
    if: contains(github.event.issue.labels.*.name, 'ai-agent') || (github.event.comment && contains(github.event.comment.body, '@ai-agent'))
    runs-on: ubuntu-latest
    
    permissions:
      issues: write
      contents: write
      pull-requests: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          npm install @google/generative-ai
          
      - name: Create AI logs directory
        run: mkdir -p .ai-logs
        
      - name: Initialize AI Agent
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ü§ñ **Gemini AI Agent Activated**
              
              I'm analyzing your request and will implement the solution using Google's Gemini 1.5 Pro model.
              
              **Status:** üîÑ Analyzing requirements...
              **Expected completion:** 3-5 minutes
              
              I'll update you with my progress shortly!
              `
            });
            
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['ai-working', 'gemini-ai']
            });
            
      - name: Configure Git
        run: |
          git config --global user.name 'Gemini AI Agent'
          git config --global user.email 'ai-agent@danielsbonnin.com'
          
      - name: Create Implementation Branch
        run: |
          BRANCH_NAME="gemini-ai-implementation-${{ github.event.issue.number }}-$(date +%s)"
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
      - name: Run Gemini AI Agent
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_ISSUE_NUMBER: ${{ github.event.issue.number }}
          GITHUB_ISSUE_TITLE: ${{ github.event.issue.title }}
          GITHUB_ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          echo "ü§ñ Starting Gemini AI implementation..."
          node .github/scripts/ai-agent-gemini.js
          
      - name: Commit AI Implementation
        run: |
          git add .
          git diff --staged --quiet || git commit -m "ü§ñ Gemini AI Implementation for #${{ github.event.issue.number }}

          Implemented by Gemini 1.5 Pro AI Agent
          
          - Analyzed requirements and codebase
          - Generated implementation plan
          - Created/modified necessary files
          - Added comprehensive logging
          
          Issue: ${{ github.event.issue.title }}
          Closes #${{ github.event.issue.number }}"
          
      - name: Push Implementation
        run: git push origin "$BRANCH_NAME"
        
      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read AI implementation report
            let aiReport = 'Implementation completed by Gemini AI Agent';
            try {
              aiReport = fs.readFileSync('.ai-logs/implementation-report.md', 'utf8');
            } catch (e) {
              console.log('No detailed report found, using default');
            }
            
            // Read implementation plan
            let implementationPlan = '';
            try {
              implementationPlan = fs.readFileSync('.ai-logs/implementation-plan.md', 'utf8');
            } catch (e) {
              console.log('No implementation plan found');
            }
            
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ü§ñ Gemini AI: ${context.payload.issue.title}`,
              head: process.env.BRANCH_NAME,
              base: 'main',
              body: `## ü§ñ Gemini AI Implementation

            This pull request was automatically generated by Gemini 1.5 Pro AI Agent.

            ${aiReport}

            ## üß† Implementation Plan
            
            <details>
            <summary>Click to view detailed implementation plan</summary>
            
            ${implementationPlan || 'Implementation plan not available'}
            
            </details>

            ## ‚úÖ Quality Checklist
            
            - [ ] Code builds successfully (\`npm run build\`)
            - [ ] No TypeScript errors
            - [ ] No ESLint errors  
            - [ ] Responsive design works
            - [ ] Functionality matches requirements
            - [ ] Manual testing completed
            - [ ] Ready for production

            ## üîç Review Notes
            
            This implementation was generated by AI and should be reviewed carefully:
            - Verify the logic meets your exact requirements
            - Test the functionality manually
            - Check for any edge cases not covered
            - Ensure styling matches your design preferences            ---
            **Closes #${{ github.event.issue.number }}**
            
            *üöÄ Powered by Gemini 1.5 Pro AI Agent*
            `
            });

            // Update the original issue
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### ‚úÖ Implementation Complete!

            üéâ **Gemini AI Agent has successfully completed your request!**

            **Pull Request:** #${pr.number}
            **Branch:** \`${process.env.BRANCH_NAME}\`
            **Implementation Time:** ~3 minutes

            ### üöÄ What I Built:
            - Analyzed your requirements using Gemini 1.5 Pro
            - Generated a comprehensive implementation plan  
            - Created/modified all necessary files
            - Applied Next.js 14+ best practices
            - Used TypeScript and Tailwind CSS
            - Made it responsive and accessible

            ### üëÄ Next Steps:
            1. **Review the PR** - Check that everything looks good
            2. **Test manually** - Make sure it works as expected
            3. **Run build** - Verify no errors with \`npm run build\`
            4. **Merge when ready** - Deploy your new feature!

            The implementation is production-ready, but please review carefully and test thoroughly.

            ---
            *‚ö° Powered by Gemini 1.5 Pro AI*`
            });

            // Update labels
            await github.rest.issues.removeLabel({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'ai-working'
            }).catch(() => {});

            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['implemented', 'ready-for-review', 'gemini-completed']
            });
            
      - name: Handle Errors
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå **AI Agent Error**
              
              The Gemini AI agent encountered an error while processing your request.
              
              **Possible causes:**
              - API key issues
              - Rate limiting
              - Complex requirements that need human review
              
              Please check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
              
              You can try:
              1. Re-running the workflow
              2. Creating a new issue with more specific requirements
              3. Contacting the maintainer for manual implementation
              `
            });
            
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['ai-error', 'needs-human-review']
            });
