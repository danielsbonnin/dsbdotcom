name: Gemini AI Agent
on:
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created]

jobs:
  gemini-ai-agent:
    if: contains(github.event.issue.labels.*.name, 'ai-agent') || (github.event.comment && contains(github.event.comment.body, '@ai-agent'))
    runs-on: ubuntu-latest
    
    permissions:
      issues: write
      contents: write
      pull-requests: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Process AI Agent Request
        uses: actions/github-script@v7
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        with:
          script: |
            const { GoogleGenerativeAI } = require('@google/generative-ai');
            
            // Initialize Gemini AI
            if (!process.env.GEMINI_API_KEY) {
              console.log('‚ö†Ô∏è GEMINI_API_KEY not found. Please add it to repository secrets.');
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '‚ö†Ô∏è **AI Agent Error**: GEMINI_API_KEY not configured. Please add the API key to repository secrets.'
              });
              return;
            }
              const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
            const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash-preview-05-20" });
            
            const issue = context.payload.issue;
            const issueBody = issue.body || '';
            const issueTitle = issue.title || '';
            
            // Create prompt for AI
            const prompt = `
            Analyze this GitHub issue and provide implementation guidance:
            
            Title: ${issueTitle}
            Description: ${issueBody}
            
            Please provide:
            1. A brief analysis of the request
            2. Implementation steps
            3. Files that might need to be modified
            4. Any potential challenges
            
            Format the response in markdown for a GitHub comment.
            `;
            
            try {
              const result = await model.generateContent(prompt);
              const response = await result.response;
              const analysis = response.text();
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `ü§ñ **Gemini AI Analysis**\n\n${analysis}\n\n---\n*Powered by Google Gemini AI*`
              });
              
              // Add labels
              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['ai-analyzed', 'gemini-processed']
              });
              
            } catch (error) {
              console.error('Gemini AI Error:', error);
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `‚ùå **AI Agent Error**: Failed to process request with Gemini AI.\n\nError: ${error.message}`
              });
            }
