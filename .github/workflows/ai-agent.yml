name: AI Agent Automation

on:
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created]

env:
  NODE_VERSION: "20"

jobs:
  validate-trigger:
    name: Validate AI Agent Trigger
    runs-on: ubuntu-latest
    permissions:
      issues: read
    outputs:
      should-process: ${{ steps.validate.outputs.should-process }}
      issue-data: ${{ steps.validate.outputs.issue-data }}
    steps:
      - name: Checkout Scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github/scripts
          
      - name: Validate Trigger Conditions
        id: validate
        uses: actions/github-script@v7
        with:
          script: |
            const { validateTrigger } = require('./.github/scripts/ai-agent/validate-trigger.js');
            return await validateTrigger({ github, context, core });

  check-duplicate:
    name: Check for Duplicate Processing
    needs: validate-trigger
    if: needs.validate-trigger.outputs.should-process == 'true'
    runs-on: ubuntu-latest
    permissions:
      issues: read
    outputs:
      should-continue: ${{ steps.check.outputs.should-continue }}
    steps:
      - name: Checkout Scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github/scripts
          
      - name: Check for Existing AI Processing
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const { checkDuplicateProcessing } = require('./.github/scripts/ai-agent/check-duplicate.js');
            return await checkDuplicateProcessing({ github, context, core });

  parse-issue:
    name: Parse Issue Content
    needs: [validate-trigger, check-duplicate]
    if: needs.check-duplicate.outputs.should-continue == 'true'
    runs-on: ubuntu-latest
    permissions:
      issues: read
    outputs:
      task-data: ${{ steps.parse.outputs.task-data }}
    steps:
      - name: Checkout Scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github/scripts
          
      - name: Parse Issue Content
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const { parseIssueContent } = require('./.github/scripts/ai-agent/parse-issue.js');
            return await parseIssueContent({ github, context, core });

  notify-start:
    name: Notify Processing Start
    needs: [validate-trigger, check-duplicate, parse-issue]
    if: needs.check-duplicate.outputs.should-continue == 'true'
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Checkout Scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github/scripts
          
      - name: Post Start Notification
        uses: actions/github-script@v7
        with:
          script: |
            const { notifyProcessingStart } = require('./.github/scripts/ai-agent/notifications.js');
            const taskData = JSON.parse(process.env.TASK_DATA);
            await notifyProcessingStart({ github, context, taskData });
        env:
          TASK_DATA: ${{ needs.parse-issue.outputs.task-data }}

  ai-implementation:
    name: Generate AI Implementation
    needs: [validate-trigger, check-duplicate, parse-issue, notify-start]
    if: needs.check-duplicate.outputs.should-continue == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      branch-name: ${{ steps.create-branch.outputs.branch-name }}
      implementation-result: ${{ steps.generate.outputs.implementation-result }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          
      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          
      - name: Configure Git
        run: |
          git config --global user.name 'AI Agent'
          git config --global user.email 'ai-agent@danielsbonnin.com'
          
      - name: Create Implementation Branch
        id: create-branch
        run: |
          BRANCH_NAME="ai-task-${{ github.event.issue.number }}-$(date +%s)"
          git checkout -b "$BRANCH_NAME"
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
      - name: Generate AI Implementation
        id: generate
        uses: actions/github-script@v7
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          TASK_DATA: ${{ needs.parse-issue.outputs.task-data }}
        with:
          script: |
            const { generateImplementation } = require('./.github/scripts/ai-agent/generate-implementation.js');
            const taskData = JSON.parse(process.env.TASK_DATA);
            return await generateImplementation({ github, context, core, taskData });
            
      - name: Commit and Push Changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git add .
            git commit -m "ðŸ¤– AI Implementation for #${{ github.event.issue.number }}: ${{ github.event.issue.title }}
            
            Generated by AI Agent using Gemini AI
            
            Closes #${{ github.event.issue.number }}"
            git push origin "${{ steps.create-branch.outputs.branch-name }}"
          else
            echo "No changes to commit"
            exit 1
          fi

  create-pull-request:
    name: Create Pull Request
    needs: [parse-issue, ai-implementation]
    if: success()
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Checkout Scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github/scripts
          
      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const { createImplementationPR } = require('./.github/scripts/ai-agent/create-pr.js');
            const taskData = JSON.parse(process.env.TASK_DATA);
            const branchName = '${{ needs.ai-implementation.outputs.branch-name }}';
            const implementationResult = JSON.parse(process.env.IMPLEMENTATION_RESULT);
            
            await createImplementationPR({ 
              github, 
              context, 
              taskData, 
              branchName, 
              implementationResult 
            });
        env:
          TASK_DATA: ${{ needs.parse-issue.outputs.task-data }}
          IMPLEMENTATION_RESULT: ${{ needs.ai-implementation.outputs.implementation-result }}

  handle-failure:
    name: Handle Failure
    needs: [validate-trigger, check-duplicate, parse-issue, notify-start, ai-implementation, create-pull-request]
    if: failure()
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Checkout Scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github/scripts
          
      - name: Notify Failure
        uses: actions/github-script@v7
        with:
          script: |
            const { notifyProcessingFailure } = require('./.github/scripts/ai-agent/notifications.js');
            await notifyProcessingFailure({ github, context });
            {
              "analysis": "Brief explanation of what you are implementing",
              "files": [
                {
                  "path": "relative/path/to/file.tsx",
                  "action": "create",
                  "content": "FILE_CONTENT_HERE",
                  "explanation": "what this file does"
                }
              ],
              "instructions": "Any additional setup or testing instructions"
            }

            **CRITICAL JSON REQUIREMENTS:**
            - Use double quotes for all strings
            - For the "content" field, replace all newlines with \\n
            - Escape all backslashes as \\\\
            - Escape all double quotes as \\"
            - Do NOT use backticks (`) anywhere in the JSON
            - The content should be a single string with \\n for line breaks

            Example of proper content formatting:
            "content": "import React from 'react';\\n\\nconst Component = () => {\\n  return <div>Hello</div>;\\n};"

            Generate actual, working code - not placeholder comments or TODOs.
            `;
              try {
              console.log('Sending request to Gemini AI...');
              const result = await model.generateContent(prompt);
              const response = await result.response;
              const aiResponse = response.text();
              console.log('AI Response received, parsing...');
              
              // Extract JSON from response (handle markdown code blocks)
              let jsonStr = aiResponse;
              const jsonMatch = aiResponse.match(/```(?:json)?\n?([\s\S]*?)\n?```/);
              if (jsonMatch) {
                jsonStr = jsonMatch[1];
              }
              
              // Clean up common JSON issues before parsing
              jsonStr = jsonStr.trim();
              
              // Try to parse JSON, with better error handling
              let implementation;
              try {
                implementation = JSON.parse(jsonStr);
              } catch (parseError) {
                console.log('Initial JSON parse failed, attempting to fix common issues...');
                console.log('Parse error:', parseError.message);
                console.log('JSON string preview:', jsonStr.substring(0, 500));
                
                // Try to fix common issues
                let fixedJson = jsonStr;
                
                // Fix unescaped backticks in content
                fixedJson = fixedJson.replace(/"content":\s*"([^"]*`[^"]*)"/, (match, content) => {
                  const escapedContent = content.replace(/`/g, '\\`').replace(/\\/g, '\\\\');
                  return `"content": "${escapedContent}"`;
                });
                
                // Try parsing again
                try {
                  implementation = JSON.parse(fixedJson);
                  console.log('Successfully parsed JSON after fixes');
                } catch (secondError) {
                  console.error('Failed to parse JSON even after fixes:', secondError.message);
                  throw new Error(`Invalid JSON response from AI. Parse error: ${secondError.message}. Response preview: ${jsonStr.substring(0, 200)}...`);
                }
              }
              
              if (!implementation || !implementation.files || !Array.isArray(implementation.files)) {
                throw new Error('Invalid implementation format: missing files array');
              }
              
              // Apply the implementation
              for (const file of implementation.files) {
                const filePath = file.path;
                const dir = path.dirname(filePath);
                
                // Create directory if it doesn't exist
                if (dir !== '.' && !fs.existsSync(dir)) {
                  fs.mkdirSync(dir, { recursive: true });
                }
                
                // Write the file
                fs.writeFileSync(filePath, file.content);
                console.log(`${file.action === 'create' ? 'Created' : 'Modified'}: ${filePath}`);
              }
              
              // Create implementation summary
              const summary = '# AI Implementation Summary\n\n## Analysis\n' + 
                implementation.analysis + 
                '\n\n## Files Modified\n' + 
                implementation.files.map(f => '- **' + f.path + '** (' + f.action + '): ' + f.explanation).join('\n') + 
                '\n\n## Instructions\n' + 
                (implementation.instructions || 'No additional setup required.') + 
                '\n\nGenerated by AI Agent using Gemini 1.5 Flash\n';
              
              fs.writeFileSync('AI_IMPLEMENTATION.md', summary);
              
              core.setOutput('implementation', JSON.stringify(implementation));
              core.setOutput('filesModified', implementation.files.length);
              
              return implementation;
              
            } catch (error) {
              console.error('AI Implementation Error:', error);
              throw new Error('Failed to generate implementation: ' + error.message);
            }

      - name: Commit Implementation
        run: |
          git add .
          git commit -m "ðŸ¤– AI Implementation for #${{ github.event.issue.number }}: ${{ github.event.issue.title }}

          Generated files using Gemini AI.

          Closes #${{ github.event.issue.number }}"
          git push origin "${{ steps.create-branch.outputs.branch-name }}"

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸ¤– AI Implementation: ${{ github.event.issue.title }}`,
              head: `${{ steps.create-branch.outputs.branch-name }}`,
              base: 'main',
              body: `## ðŸ¤– AI-Generated Implementation
              
              This pull request contains real code generated by Gemini AI in response to issue #${{ github.event.issue.number }}.
              
              **Original Issue:** #${{ github.event.issue.number }}
              **AI Model:** Gemini 1.5 Flash
              
              ## Implementation Details
              
              The AI agent analyzed the requirements and generated production-ready code. See AI_IMPLEMENTATION.md for detailed analysis and instructions.
              
              ## Review Instructions
              
              1. **Check Code Quality** - Review the AI-generated implementation
              2. **Test Functionality** - Ensure the code works as expected  
              3. **Verify Requirements** - Confirm the issue requirements are met
              4. **Deploy** - Merge to automatically deploy changes
              
              ## AI Analysis
              
              Check the AI_IMPLEMENTATION.md file for the complete AI analysis, file explanations, and any additional setup instructions.
              
              Closes #${{ github.event.issue.number }}
              `
            });

            // Link PR back to issue
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `âœ… **AI Implementation Complete!**
              
              ðŸš€ **Pull Request Created:** #${pr.number}
              
              The AI agent has analyzed your request and generated code using Gemini AI.
              
              **What was implemented:**
              - Real, functional code (not placeholders)
              - Generated using Gemini 1.5 Flash AI model
              - Includes detailed analysis in AI_IMPLEMENTATION.md
              
              **Next steps:**
              1. Review the pull request and generated code
              2. Test the implementation locally if needed
              3. Merge when satisfied with the results
              
              The code is ready for production use! ðŸŽ‰
              `
            });

            // Update labels
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['ai-implemented', 'ready-for-review']
            });

            await github.rest.issues.removeLabel({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'ai-working'
            }).catch(() => {
              // Ignore if label doesn't exist
            });
