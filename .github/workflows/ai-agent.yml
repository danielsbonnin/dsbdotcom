name: AI Agent Automation
on:
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created]

jobs:
  ai-agent-handler:
    if: contains(github.event.issue.labels.*.name, 'ai-agent') || (github.event.comment && contains(github.event.comment.body, '@ai-agent'))
    runs-on: ubuntu-latest
    
    permissions:
      issues: write
      contents: write
      pull-requests: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Parse Issue Content
        id: parse-issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const issueBody = issue.body || '';
            
            // Extract information from issue body
            const taskType = issueBody.match(/Task Type[\s\S]*?### (.+)/)?.[1]?.trim() || 'Unknown';
            const priority = issueBody.match(/Priority[\s\S]*?### (.+)/)?.[1]?.trim() || 'Medium';
            const description = issueBody.match(/Task Description[\s\S]*?### ([\s\S]+?)###/)?.[1]?.trim() || issue.title;
            
            console.log('Parsed issue:', { taskType, priority, description });
            
            // Set outputs properly
            core.setOutput('taskType', taskType);
            core.setOutput('priority', priority);
            core.setOutput('description', description);
            core.setOutput('issueNumber', issue.number);
            core.setOutput('title', issue.title);
            
            return {
              taskType,
              priority,
              description,
              issueNumber: issue.number,
              title: issue.title
            };
            
      - name: Comment on Issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ¤– **AI Agent Assigned**
              
              I've been assigned to work on this task. I'll analyze the requirements and create a pull request with the implementation.
              
              **Task Analysis:**
              - **Type:** ${{ steps.parse-issue.outputs.taskType }}
              - **Priority:** ${{ steps.parse-issue.outputs.priority }}
              - **Status:** In Progress ðŸ”„
                I'll update this issue with my progress. Expected completion time: 5-10 minutes.
              `
            });
            
      - name: Add Progress Label
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['in-progress', 'ai-working']
            });
            
      - name: Create AI Implementation Branch
        id: create-branch
        run: |
          git config --global user.name 'AI Agent'
          git config --global user.email 'ai-agent@danielsbonnin.com'
          
          # Create a new branch for this issue
          BRANCH_NAME="ai-task-${{ github.event.issue.number }}-$(date +%s)"
          git checkout -b "$BRANCH_NAME"
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Create a placeholder implementation file
          mkdir -p .ai-implementations
          cat > .ai-implementations/task-${{ github.event.issue.number }}.md << EOF
          # AI Implementation for Issue #${{ github.event.issue.number }}
          
          **Issue Title:** ${{ github.event.issue.title }}
          **Task Type:** ${{ steps.parse-issue.outputs.taskType }}
          **Priority:** ${{ steps.parse-issue.outputs.priority }}
          
          ## Implementation Plan
          
          This is a placeholder implementation. In a full AI agent setup, this would contain:
          
          1. **Analysis of Requirements**
          2. **Code Changes**
          3. **Testing Strategy**
          4. **Documentation Updates**
          
          ## Files Modified
          
          - This file: .ai-implementations/task-${{ github.event.issue.number }}.md
          
          ## Next Steps
          
          1. Review the implementation
          2. Test the changes
          3. Merge when ready
          EOF
            # Commit the implementation
          git add .
          git commit -m "AI Implementation for issue #${{ github.event.issue.number }}: ${{ github.event.issue.title }}"
          git push origin "$BRANCH_NAME"
          
      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸ¤– AI Implementation: ${{ github.event.issue.title }}`,
              head: `${{ steps.create-branch.outputs.branch-name }}`,
              base: 'main',
              body: `## AI Agent Implementation
              
              This pull request was automatically generated by the AI Agent in response to issue #${{ github.event.issue.number }}.
              
              **Original Issue:** #${{ github.event.issue.number }}
              **Task Type:** ${{ steps.parse-issue.outputs.taskType }}
              **Priority:** ${{ steps.parse-issue.outputs.priority }}
              
              ## Changes Made
              
              - Created implementation file with placeholder content
              - Set up branch structure for AI development
              
              ## Review Instructions
              
              1. **Check Implementation** - Review the AI-generated code
              2. **Test Changes** - Ensure all functionality works as expected
              3. **Merge when ready** - The changes will be deployed automatically
              
              **Note:** This is a template implementation. In a production AI agent, this would contain actual code changes based on the issue requirements.
              
              Closes #${{ github.event.issue.number }}
              `
            });
            
            // Link PR back to issue
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `âœ… **Implementation Complete!**
              
              I've created a pull request with the implementation: #${pr.number}
              
              Please review the changes and merge when ready. The AI agent has completed its analysis and provided a starting point for the implementation.
              `
            });
            
            // Update labels
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['ai-implemented', 'ready-for-review']
            });
            
            await github.rest.issues.removeLabel({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'ai-working'
            }).catch(() => {
              // Ignore if label doesn't exist
            });
