name: AI Agent Automation
on:
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created]

jobs:
  ai-agent-handler:
    if: contains(github.event.issue.labels.*.name, 'ai-agent') || (github.event.comment && contains(github.event.comment.body, '@ai-agent'))
    runs-on: ubuntu-latest
    
    permissions:
      issues: write
      contents: write
      pull-requests: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Parse Issue Content
        id: parse-issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const issueBody = issue.body || '';
            
            // Extract information from issue body
            const taskType = issueBody.match(/Task Type[\s\S]*?### (.+)/)?.[1]?.trim() || 'Unknown';
            const priority = issueBody.match(/Priority[\s\S]*?### (.+)/)?.[1]?.trim() || 'Medium';
            const description = issueBody.match(/Task Description[\s\S]*?### ([\s\S]+?)###/)?.[1]?.trim() || issue.title;
            
            console.log('Parsed issue:', { taskType, priority, description });
            
            // Set outputs properly
            core.setOutput('taskType', taskType);
            core.setOutput('priority', priority);
            core.setOutput('description', description);
            core.setOutput('issueNumber', issue.number);
            core.setOutput('title', issue.title);
            
            return {
              taskType,
              priority,
              description,
              issueNumber: issue.number,
              title: issue.title
            };
            
      - name: Comment on Issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ¤– **AI Agent Assigned**
              
              I've been assigned to work on this task. I'll analyze the requirements and create a pull request with the implementation.
              
              **Task Analysis:**
              - **Type:** ${context.payload.issue.title}
              - **Priority:** Medium
              - **Status:** In Progress ðŸ”„
              
              I'll update this issue with my progress. Expected completion time: 5-10 minutes.
              `
            });
            
      - name: Add Progress Label
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['in-progress', 'ai-working']
            });
            
      - name: Create AI Implementation Branch
        id: create-branch
        run: |
          git config --global user.name 'AI Agent'
          git config --global user.email 'ai-agent@danielsbonnin.com'
          
          # Create a new branch for this issue
          BRANCH_NAME="ai-task-${{ github.event.issue.number }}-$(date +%s)"
          git checkout -b "$BRANCH_NAME"
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
      - name: Generate AI Implementation
        id: ai-implementation
        uses: actions/github-script@v7
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        with:
          script: |
            const { GoogleGenerativeAI } = require('@google/generative-ai');
            const fs = require('fs');
            const path = require('path');
            
            if (!process.env.GEMINI_API_KEY) {
              throw new Error('GEMINI_API_KEY not found in secrets');
            }
            
            const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
            const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
            
            const issue = context.payload.issue;
            const issueBody = issue.body || '';
            const issueTitle = issue.title || '';
            
            // Read current project structure
            const getProjectFiles = () => {
              const files = [];
              const walkDir = (dir, maxDepth = 2, currentDepth = 0) => {
                if (currentDepth >= maxDepth) return;
                try {
                  const items = fs.readdirSync(dir);
                  items.forEach(item => {
                    if (item.startsWith('.') && item !== '.github') return;
                    const fullPath = path.join(dir, item);
                    const stat = fs.statSync(fullPath);
                    if (stat.isDirectory()) {
                      walkDir(fullPath, maxDepth, currentDepth + 1);
                    } else if (item.match(/\.(ts|tsx|js|jsx|md|json|yml|yaml)$/)) {
                      files.push(fullPath.replace(process.cwd() + path.sep, ''));
                    }
                  });
                } catch (e) {
                  console.log(`Error reading directory ${dir}:`, e.message);
                }
              };
              walkDir(process.cwd());
              return files;
            };
            
            const projectFiles = getProjectFiles();
            const projectStructure = projectFiles.slice(0, 50).join('\n');
            
            // Create comprehensive prompt for AI
            const prompt = `
            You are an expert software developer working on a Next.js portfolio website. 
            
            **Project Context:**
            - This is a Next.js 15 project with TypeScript, Tailwind CSS
            - It's a personal portfolio website (danielsbonnin.com)
            - Current structure includes: ${projectStructure}
            
            **Issue to Implement:**
            Title: ${issueTitle}
            Description: ${issueBody}
              **Your Task:**
            1. Analyze the request and determine what specific files need to be created/modified
            2. Generate the complete, production-ready code for each file
            3. Ensure the code follows Next.js 15 best practices and TypeScript
            4. Make sure the implementation is complete and functional
            
            **Response Format:**
            You MUST respond with valid JSON only. Use this exact structure:
            
            {
              "analysis": "Brief explanation of what you are implementing",
              "files": [
                {
                  "path": "relative/path/to/file.tsx",
                  "action": "create",
                  "content": "FILE_CONTENT_HERE",
                  "explanation": "what this file does"
                }
              ],
              "instructions": "Any additional setup or testing instructions"
            }
            
            **CRITICAL JSON REQUIREMENTS:**
            - Use double quotes for all strings
            - For the "content" field, replace all newlines with \\n
            - Escape all backslashes as \\\\
            - Escape all double quotes as \\"
            - Do NOT use backticks (`) anywhere in the JSON
            - The content should be a single string with \\n for line breaks
            
            Example of proper content formatting:
            "content": "import React from 'react';\\n\\nconst Component = () => {\\n  return <div>Hello</div>;\\n};"
            
            Generate actual, working code - not placeholder comments or TODOs.
            `;
            
            try {
              console.log('Sending request to Gemini AI...');
              const result = await model.generateContent(prompt);
              const response = await result.response;
              const aiResponse = response.text();
                console.log('AI Response received, parsing...');
              
              // Extract JSON from response (handle markdown code blocks)
              let jsonStr = aiResponse;
              const jsonMatch = aiResponse.match(/```(?:json)?\n?([\s\S]*?)\n?```/);
              if (jsonMatch) {
                jsonStr = jsonMatch[1];
              }
              
              // Clean up common JSON issues before parsing
              jsonStr = jsonStr.trim();
              
              // Try to parse JSON, with better error handling
              let implementation;
              try {
                implementation = JSON.parse(jsonStr);
              } catch (parseError) {
                console.log('Initial JSON parse failed, attempting to fix common issues...');
                console.log('Parse error:', parseError.message);
                console.log('JSON string preview:', jsonStr.substring(0, 500));
                
                // Try to fix common issues
                let fixedJson = jsonStr;
                
                // Fix unescaped backticks in content
                fixedJson = fixedJson.replace(/"content":\s*"([^"]*`[^"]*)"/, (match, content) => {
                  const escapedContent = content.replace(/`/g, '\\`').replace(/\\/g, '\\\\');
                  return `"content": "${escapedContent}"`;
                });
                
                // Try parsing again
                try {
                  implementation = JSON.parse(fixedJson);
                  console.log('Successfully parsed JSON after fixes');
                } catch (secondError) {
                  console.error('Failed to parse JSON even after fixes:', secondError.message);
                  throw new Error(`Invalid JSON response from AI. Parse error: ${secondError.message}. Response preview: ${jsonStr.substring(0, 200)}...`);
                }
              }
              
              if (!implementation || !implementation.files || !Array.isArray(implementation.files)) {
                throw new Error('Invalid implementation format: missing files array');
              }
              
              // Apply the implementation
              for (const file of implementation.files) {
                const filePath = file.path;
                const dir = path.dirname(filePath);
                
                // Create directory if it doesn't exist
                if (dir !== '.' && !fs.existsSync(dir)) {
                  fs.mkdirSync(dir, { recursive: true });
                }
                
                // Write the file
                fs.writeFileSync(filePath, file.content);
                console.log(`${file.action === 'create' ? 'Created' : 'Modified'}: ${filePath}`);
              }
              
              // Create implementation summary
              const summary = '# AI Implementation Summary\n\n## Analysis\n' + 
                implementation.analysis + 
                '\n\n## Files Modified\n' + 
                implementation.files.map(f => '- **' + f.path + '** (' + f.action + '): ' + f.explanation).join('\n') + 
                '\n\n## Instructions\n' + 
                (implementation.instructions || 'No additional setup required.') + 
                '\n\nGenerated by AI Agent using Gemini 1.5 Flash\n';
              
              fs.writeFileSync('AI_IMPLEMENTATION.md', summary);
              
              core.setOutput('implementation', JSON.stringify(implementation));
              core.setOutput('filesModified', implementation.files.length);
              
              return implementation;
              
            } catch (error) {
              console.error('AI Implementation Error:', error);
              throw new Error('Failed to generate implementation: ' + error.message);
            }
            
      - name: Commit Implementation
        run: |
          git add .
          git commit -m "ðŸ¤– AI Implementation for #${{ github.event.issue.number }}: ${{ github.event.issue.title }}

          Generated files using Gemini AI.
          
          Closes #${{ github.event.issue.number }}"
          git push origin "${{ steps.create-branch.outputs.branch-name }}"
          
      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸ¤– AI Implementation: ${{ github.event.issue.title }}`,
              head: `${{ steps.create-branch.outputs.branch-name }}`,
              base: 'main',
              body: `## ðŸ¤– AI-Generated Implementation
              
              This pull request contains real code generated by Gemini AI in response to issue #${{ github.event.issue.number }}.
              
              **Original Issue:** #${{ github.event.issue.number }}
              **AI Model:** Gemini 1.5 Flash
              
              ## Implementation Details
              
              The AI agent analyzed the requirements and generated production-ready code. See AI_IMPLEMENTATION.md for detailed analysis and instructions.
              
              ## Review Instructions
              
              1. **Check Code Quality** - Review the AI-generated implementation
              2. **Test Functionality** - Ensure the code works as expected  
              3. **Verify Requirements** - Confirm the issue requirements are met
              4. **Deploy** - Merge to automatically deploy changes
              
              ## AI Analysis
              
              Check the AI_IMPLEMENTATION.md file for the complete AI analysis, file explanations, and any additional setup instructions.
              
              Closes #${{ github.event.issue.number }}
              `
            });
            
            // Link PR back to issue
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `âœ… **AI Implementation Complete!**
              
              ðŸš€ **Pull Request Created:** #${pr.number}
              
              The AI agent has analyzed your request and generated code using Gemini AI.
              
              **What was implemented:**
              - Real, functional code (not placeholders)
              - Generated using Gemini 1.5 Flash AI model
              - Includes detailed analysis in AI_IMPLEMENTATION.md
              
              **Next steps:**
              1. Review the pull request and generated code
              2. Test the implementation locally if needed
              3. Merge when satisfied with the results
              
              The code is ready for production use! ðŸŽ‰
              `
            });
            
            // Update labels
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['ai-implemented', 'ready-for-review']
            });
            
            await github.rest.issues.removeLabel({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'ai-working'
            }).catch(() => {
              // Ignore if label doesn't exist
            });
